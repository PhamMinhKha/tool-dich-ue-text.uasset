#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Demo Translation Script
Script demo ƒë·ªÉ test d·ªãch thu·∫≠t m·ªôt v√†i text m·∫´u
"""

import json
import os
from uasset_text_extractor import UAssetTextExtractor

def create_demo_translation():
    """T·∫°o file demo v·ªõi m·ªôt v√†i text ƒë√£ d·ªãch s·∫µn"""
    
    # ƒê·ªçc file JSON g·ªëc
    json_file = "GDSSystemText_texts.json"
    if not os.path.exists(json_file):
        print(f"Kh√¥ng t√¨m th·∫•y file {json_file}")
        print("H√£y ch·∫°y extract tr∆∞·ªõc: python3 uasset_text_extractor.py extract GDSSystemText.uasset")
        return
    
    with open(json_file, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    # Dictionary d·ªãch thu·∫≠t m·∫´u
    translations = {
        "Exit Craft Mode?": "Tho√°t ch·∫ø ƒë·ªô x√¢y d·ª±ng?",
        "Exit Hagram Build?": "Tho√°t ch·∫ø ƒë·ªô x√¢y d·ª±ng Hagram?",
        "Build here?": "X√¢y d·ª±ng ·ªü ƒë√¢y?",
        "That contains prohibited words.": "C√≥ ch·ª©a t·ª´ b·ªã c·∫•m.",
        "That contains prohibited characters.": "C√≥ ch·ª©a k√Ω t·ª± b·ªã c·∫•m.",
        "Names must contain letters.": "T√™n ph·∫£i ch·ª©a ch·ªØ c√°i.",
        "Kanji cannot be used.": "Kh√¥ng th·ªÉ s·ª≠ d·ª•ng Kanji.",
        "Numbers must be six or fewer digits.": "S·ªë ph·∫£i c√≥ 6 ch·ªØ s·ªë ho·∫∑c √≠t h∆°n.",
        "Please enter a name.": "Vui l√≤ng nh·∫≠p t√™n.",
        "Enter the player name you wish to search.": "Nh·∫≠p t√™n ng∆∞·ªùi ch∆°i b·∫°n mu·ªën t√¨m.",
        "Enter the island name you wish to search.": "Nh·∫≠p t√™n ƒë·∫£o b·∫°n mu·ªën t√¨m.",
        "Enter a gift code.": "Nh·∫≠p m√£ qu√† t·∫∑ng.",
        "Enter a comment.": "Nh·∫≠p b√¨nh lu·∫≠n.",
        "Your name will be shared with online players.": "T√™n c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c chia s·∫ª v·ªõi ng∆∞·ªùi ch∆°i online.",
        "Communication failed.": "K·∫øt n·ªëi th·∫•t b·∫°i.",
        "The adventure has come to an end.": "Cu·ªôc phi√™u l∆∞u ƒë√£ k·∫øt th√∫c.",
        "The connection has been interrupted.": "K·∫øt n·ªëi ƒë√£ b·ªã gi√°n ƒëo·∫°n.",
        "Ending connection.": "ƒêang k·∫øt th√∫c k·∫øt n·ªëi.",
        "Connecting...": "ƒêang k·∫øt n·ªëi...",
        "Player Data": "D·ªØ li·ªáu ng∆∞·ªùi ch∆°i",
        "System Data": "D·ªØ li·ªáu h·ªá th·ªëng",
        "Hagram can't come back here.": "Hagram kh√¥ng th·ªÉ quay l·∫°i ƒë√¢y.",
        "Find a bigger space.": "T√¨m m·ªôt kh√¥ng gian l·ªõn h∆°n."
    }
    
    # √Åp d·ª•ng d·ªãch thu·∫≠t
    translated_count = 0
    for entry in data['text_entries']:
        original = entry['original_text']
        if original in translations:
            entry['translated_text'] = translations[original]
            entry['language'] = 'vietnamese'  # C·∫≠p nh·∫≠t ng√¥n ng·ªØ
            translated_count += 1
            print(f"D·ªãch: '{original}' -> '{translations[original]}'")
    
    # L∆∞u file demo
    demo_file = "GDSSystemText_texts_demo_vietnamese.json"
    with open(demo_file, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    
    print(f"\nƒê√£ t·∫°o file demo: {demo_file}")
    print(f"ƒê√£ d·ªãch {translated_count} text entries")
    
    return demo_file

def create_translated_uasset(demo_file):
    """T·∫°o file .uasset v·ªõi text ƒë√£ d·ªãch"""
    
    extractor = UAssetTextExtractor()
    
    # ƒê·ªçc file JSON demo
    json_data = extractor.import_from_json(demo_file)
    if not json_data:
        print("Kh√¥ng th·ªÉ ƒë·ªçc file JSON demo")
        return
    
    # ƒê·ªçc l·∫°i file g·ªëc
    original_uasset = json_data.get('file_info', {}).get('original_file')
    if not original_uasset or not os.path.exists(original_uasset):
        print("Kh√¥ng t√¨m th·∫•y file .uasset g·ªëc")
        return
    
    extractor.extract_texts(original_uasset)
    
    # T·∫°o file .uasset m·ªõi
    output_file = "GDSSystemText_vietnamese_demo.uasset"
    print(f"\nƒêang t·∫°o file .uasset ti·∫øng Vi·ªát: {output_file}")
    extractor.rebuild_uasset(json_data, output_file)
    
    return output_file

def main():
    print("=== DEMO D·ªäCH THU·∫¨T UASSET ===")
    print("Script n√†y s·∫Ω t·∫°o m·ªôt file demo v·ªõi text ti·∫øng Vi·ªát")
    print()
    
    # B∆∞·ªõc 1: T·∫°o file JSON demo v·ªõi text ƒë√£ d·ªãch
    print("B∆∞·ªõc 1: T·∫°o file JSON demo v·ªõi text ti·∫øng Vi·ªát...")
    demo_file = create_demo_translation()
    
    if not demo_file:
        return
    
    # B∆∞·ªõc 2: T·∫°o file .uasset m·ªõi
    print("\nB∆∞·ªõc 2: T·∫°o file .uasset m·ªõi v·ªõi text ti·∫øng Vi·ªát...")
    output_file = create_translated_uasset(demo_file)
    
    if output_file:
        print(f"\n‚úÖ HO√ÄN TH√ÄNH!")
        print(f"üìÅ File JSON demo: {demo_file}")
        print(f"üéÆ File .uasset ti·∫øng Vi·ªát: {output_file}")
        print()
        print("B·∫°n c√≥ th·ªÉ:")
        print(f"1. M·ªü {demo_file} ƒë·ªÉ xem/ch·ªânh s·ª≠a b·∫£n d·ªãch")
        print(f"2. S·ª≠ d·ª•ng {output_file} thay th·∫ø file g·ªëc trong game")
        print(f"3. Backup file g·ªëc tr∆∞·ªõc khi thay th·∫ø!")
    else:
        print("‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o file .uasset")

if __name__ == '__main__':
    main()